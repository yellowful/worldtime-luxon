{"version":3,"sources":["component/Option.js","component/PlusButton.js","component/Searchbox.js","component/Alltimezone.js","component/ErrorBoundary.js","component/SubButton.js","component/UpButton.js","component/Timezone.js","component/TimezoneList.js","container/App.js","serviceWorker.js","index.js"],"names":["Option","value","key","PlusButton","onPlusButton","className","fill","stroke","strokeWidth","strokeDashoffset","strokeDasharray","strokeLinecap","strokeLinejoin","xmlns","viewBox","onClick","cx","cy","r","x1","y1","x2","y2","Searchbox","splitedTimezone","onInputChange","errorMes","completeCity","searchboxValue","onChange","id","list","type","aria-describedby","placeholder","map","item","index","length","filter","includes","split","ErrorBoundary","prop","state","hasError","error","errorInfo","console","log","this","props","children","React","Component","SubButton","onSubButton","tz","UpButton","onUpButton","points","Timezone","local","tzDataStr","DateTime","setZone","setLocale","toLocaleString","DATETIME_SHORT_WITH_SECONDS","tzDataStrHuge","DATETIME_HUGE","zoneName","subZoneName","substring","indexOf","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","slice","lastIndexOf","TimezoneList","timezoneStrList","droppableId","snapshot","droppableProps","App","event","setState","searchbox","target","toLowerCase","compareCity","getTimezoneStr","i","prevState","newTzList","splice","tzTemp","tzArr","inputValue","tzStr","forEach","newList","push","reorder","array","startIndex","endIndex","orderedArray","dragged","onDragEnd","result","destination","newOrder","source","dateID","setInterval","clearInterval","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6933038d.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Option = ({value}) => {\n    //console.log(value);\n    return(\n        <option key={value} value={value}>{value}</option>\n    )\n}\n\nexport default Option;\n\n","import React from 'react';\n\nconst PlusButton = ({onPlusButton}) => {\n    return(\n        <div className=\"w-10 ml3\">\n            <svg className=\"grow\"\n            fill='none' stroke='#555555' strokeWidth='10' strokeDashoffset='194' strokeDasharray='0' strokeLinecap='round' strokeLinejoin='round' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'\n            onClick={onPlusButton} >\n                <circle cx=\"50\" cy=\"50\" r=\"40\"/> \n                <line x1=\"35\" y1=\"50\" x2=\"65\" y2=\"50\" /> \n                <line x1=\"50\" y1=\"35\" x2=\"50\" y2=\"65\" />\n            </svg>\n        </div>\n    )\n}\n\nexport default PlusButton;\n\n","import React from 'react';\nimport Option from './Option';\nimport PlusButton from './PlusButton';\n\nconst Searchbox = ({splitedTimezone, onInputChange, completeCity, errorMes, searchboxValue, onPlusButton}) => {\n    //completeCity=['newyork','new_jersy','new_mexico'].slice()\n    //console.log(splitedTimezone);\n    return (\n        <div className=\"measure pa4 black-80 \">\n            <label  className=\"f4 b db\">What time is it in</label><br/>\n            <div className=\"flex\">\n            <input \n            onChange={onInputChange}\n            id=\"city\" \n            list=\"cityDatalist\" \n            className=\"input-reset ba b--black-30 pa2 db w-60\" \n            type=\"text\" \n            aria-describedby=\"name-desc\" \n            placeholder=\"enter city name\"\n            value={searchboxValue}\n            ></input>\n            <PlusButton\n            onPlusButton={onPlusButton}\n            />\n            </div>\n            <br/>\n            <small id=\"name-desc\" \n            className=\"f5 black-60 db mb2\">{errorMes}</small>\n            <datalist id='cityDatalist' >\n            {\n                //completeCity.length !== 0?\n                // map the comparison results so every city can show in the autocomplete component \n                splitedTimezone.map((item, index) => {\n                    return <Option \n                    value={item[item.length-1]}/>\n                })\n            }\n            </datalist>\n        </div>\n    )\n}\n\nexport default Searchbox;","\nconst Alltimezone = [\"Africa/Abidjan\",\"Africa/Accra\",\"Africa/Algiers\",\"Africa/Bissau\",\"Africa/Cairo\",\"Africa/Casablanca\",\"Africa/Ceuta\",\"Africa/El_Aaiun\",\"Africa/Johannesburg\",\"Africa/Juba\",\"Africa/Khartoum\",\"Africa/Lagos\",\"Africa/Maputo\",\"Africa/Monrovia\",\"Africa/Nairobi\",\"Africa/Ndjamena\",\"Africa/Sao_Tome\",\"Africa/Tripoli\",\"Africa/Tunis\",\"Africa/Windhoek\",\"America/Adak\",\"America/Anchorage\",\"America/Araguaina\",\"America/Argentina/Buenos_Aires\",\"America/Argentina/Catamarca\",\"America/Argentina/Cordoba\",\"America/Argentina/Jujuy\",\"America/Argentina/La_Rioja\",\"America/Argentina/Mendoza\",\"America/Argentina/Rio_Gallegos\",\"America/Argentina/Salta\",\"America/Argentina/San_Juan\",\"America/Argentina/San_Luis\",\"America/Argentina/Tucuman\",\"America/Argentina/Ushuaia\",\"America/Asuncion\",\"America/Atikokan\",\"America/Bahia\",\"America/Bahia_Banderas\",\"America/Barbados\",\"America/Belem\",\"America/Belize\",\"America/Blanc-Sablon\",\"America/Boa_Vista\",\"America/Bogota\",\"America/Boise\",\"America/Cambridge_Bay\",\"America/Campo_Grande\",\"America/Cancun\",\"America/Caracas\",\"America/Cayenne\",\"America/Chicago\",\"America/Chihuahua\",\"America/Costa_Rica\",\"America/Creston\",\"America/Cuiaba\",\"America/Curacao\",\"America/Danmarkshavn\",\"America/Dawson\",\"America/Dawson_Creek\",\"America/Denver\",\"America/Detroit\",\"America/Edmonton\",\"America/Eirunepe\",\"America/El_Salvador\",\"America/Fort_Nelson\",\"America/Fortaleza\",\"America/Glace_Bay\",\"America/Godthab\",\"America/Goose_Bay\",\"America/Grand_Turk\",\"America/Guatemala\",\"America/Guayaquil\",\"America/Guyana\",\"America/Halifax\",\"America/Havana\",\"America/Hermosillo\",\"America/Indiana/Indianapolis\",\"America/Indiana/Knox\",\"America/Indiana/Marengo\",\"America/Indiana/Petersburg\",\"America/Indiana/Tell_City\",\"America/Indiana/Vevay\",\"America/Indiana/Vincennes\",\"America/Indiana/Winamac\",\"America/Inuvik\",\"America/Iqaluit\",\"America/Jamaica\",\"America/Juneau\",\"America/Kentucky/Louisville\",\"America/Kentucky/Monticello\",\"America/La_Paz\",\"America/Lima\",\"America/Los_Angeles\",\"America/Maceio\",\"America/Managua\",\"America/Manaus\",\"America/Martinique\",\"America/Matamoros\",\"America/Mazatlan\",\"America/Menominee\",\"America/Merida\",\"America/Metlakatla\",\"America/Mexico_City\",\"America/Miquelon\",\"America/Moncton\",\"America/Monterrey\",\"America/Montevideo\",\"America/Nassau\",\"America/New_York\",\"America/Nipigon\",\"America/Nome\",\"America/Noronha\",\"America/North_Dakota/Beulah\",\"America/North_Dakota/Center\",\"America/North_Dakota/New_Salem\",\"America/Ojinaga\",\"America/Panama\",\"America/Pangnirtung\",\"America/Paramaribo\",\"America/Phoenix\",\"America/Port-au-Prince\",\"America/Port_of_Spain\",\"America/Porto_Velho\",\"America/Puerto_Rico\",\"America/Punta_Arenas\",\"America/Rainy_River\",\"America/Rankin_Inlet\",\"America/Recife\",\"America/Regina\",\"America/Resolute\",\"America/Rio_Branco\",\"America/Santarem\",\"America/Santiago\",\"America/Santo_Domingo\",\"America/Sao_Paulo\",\"America/Scoresbysund\",\"America/Sitka\",\"America/St_Johns\",\"America/Swift_Current\",\"America/Tegucigalpa\",\"America/Thule\",\"America/Thunder_Bay\",\"America/Tijuana\",\"America/Toronto\",\"America/Vancouver\",\"America/Whitehorse\",\"America/Winnipeg\",\"America/Yakutat\",\"America/Yellowknife\",\"Antarctica/Casey\",\"Antarctica/Davis\",\"Antarctica/DumontDUrville\",\"Antarctica/Macquarie\",\"Antarctica/Mawson\",\"Antarctica/Palmer\",\"Antarctica/Rothera\",\"Antarctica/Syowa\",\"Antarctica/Troll\",\"Antarctica/Vostok\",\"Asia/Almaty\",\"Asia/Amman\",\"Asia/Anadyr\",\"Asia/Aqtau\",\"Asia/Aqtobe\",\"Asia/Ashgabat\",\"Asia/Atyrau\",\"Asia/Baghdad\",\"Asia/Baku\",\"Asia/Bangkok\",\"Asia/Barnaul\",\"Asia/Beirut\",\"Asia/Bishkek\",\"Asia/Brunei\",\"Asia/Chita\",\"Asia/Choibalsan\",\"Asia/Colombo\",\"Asia/Damascus\",\"Asia/Dhaka\",\"Asia/Dili\",\"Asia/Dubai\",\"Asia/Dushanbe\",\"Asia/Famagusta\",\"Asia/Gaza\",\"Asia/Hebron\",\"Asia/Ho_Chi_Minh\",\"Asia/Hong_Kong\",\"Asia/Hovd\",\"Asia/Irkutsk\",\"Asia/Jakarta\",\"Asia/Jayapura\",\"Asia/Jerusalem\",\"Asia/Kabul\",\"Asia/Kamchatka\",\"Asia/Karachi\",\"Asia/Kathmandu\",\"Asia/Khandyga\",\"Asia/Kolkata\",\"Asia/Krasnoyarsk\",\"Asia/Kuala_Lumpur\",\"Asia/Kuching\",\"Asia/Macau\",\"Asia/Magadan\",\"Asia/Makassar\",\"Asia/Manila\",\"Asia/Nicosia\",\"Asia/Novokuznetsk\",\"Asia/Novosibirsk\",\"Asia/Omsk\",\"Asia/Oral\",\"Asia/Pontianak\",\"Asia/Pyongyang\",\"Asia/Qatar\",\"Asia/Qostanay\",\"Asia/Qyzylorda\",\"Asia/Riyadh\",\"Asia/Sakhalin\",\"Asia/Samarkand\",\"Asia/Seoul\",\"Asia/Shanghai\",\"Asia/Singapore\",\"Asia/Srednekolymsk\",\"Asia/Taipei\",\"Asia/Tashkent\",\"Asia/Tbilisi\",\"Asia/Tehran\",\"Asia/Thimphu\",\"Asia/Tokyo\",\"Asia/Tomsk\",\"Asia/Ulaanbaatar\",\"Asia/Urumqi\",\"Asia/Ust-Nera\",\"Asia/Vladivostok\",\"Asia/Yakutsk\",\"Asia/Yangon\",\"Asia/Yekaterinburg\",\"Asia/Yerevan\",\"Atlantic/Azores\",\"Atlantic/Bermuda\",\"Atlantic/Canary\",\"Atlantic/Cape_Verde\",\"Atlantic/Faroe\",\"Atlantic/Madeira\",\"Atlantic/Reykjavik\",\"Atlantic/South_Georgia\",\"Atlantic/Stanley\",\"Australia/Adelaide\",\"Australia/Brisbane\",\"Australia/Broken_Hill\",\"Australia/Currie\",\"Australia/Darwin\",\"Australia/Eucla\",\"Australia/Hobart\",\"Australia/Lindeman\",\"Australia/Lord_Howe\",\"Australia/Melbourne\",\"Australia/Perth\",\"Australia/Sydney\",\"CET\",\"CST6CDT\",\"EET\",\"EST\",\"EST5EDT\",\"Etc/GMT\",\"Etc/GMT+1\",\"Etc/GMT+10\",\"Etc/GMT+11\",\"Etc/GMT+12\",\"Etc/GMT+2\",\"Etc/GMT+3\",\"Etc/GMT+4\",\"Etc/GMT+5\",\"Etc/GMT+6\",\"Etc/GMT+7\",\"Etc/GMT+8\",\"Etc/GMT+9\",\"Etc/GMT-1\",\"Etc/GMT-10\",\"Etc/GMT-11\",\"Etc/GMT-12\",\"Etc/GMT-13\",\"Etc/GMT-14\",\"Etc/GMT-2\",\"Etc/GMT-3\",\"Etc/GMT-4\",\"Etc/GMT-5\",\"Etc/GMT-6\",\"Etc/GMT-7\",\"Etc/GMT-8\",\"Etc/GMT-9\",\"Etc/UTC\",\"Europe/Amsterdam\",\"Europe/Andorra\",\"Europe/Astrakhan\",\"Europe/Athens\",\"Europe/Belgrade\",\"Europe/Berlin\",\"Europe/Brussels\",\"Europe/Bucharest\",\"Europe/Budapest\",\"Europe/Chisinau\",\"Europe/Copenhagen\",\"Europe/Dublin\",\"Europe/Gibraltar\",\"Europe/Helsinki\",\"Europe/Istanbul\",\"Europe/Kaliningrad\",\"Europe/Kiev\",\"Europe/Kirov\",\"Europe/Lisbon\",\"Europe/London\",\"Europe/Luxembourg\",\"Europe/Madrid\",\"Europe/Malta\",\"Europe/Minsk\",\"Europe/Monaco\",\"Europe/Moscow\",\"Europe/Oslo\",\"Europe/Paris\",\"Europe/Prague\",\"Europe/Riga\",\"Europe/Rome\",\"Europe/Samara\",\"Europe/Saratov\",\"Europe/Simferopol\",\"Europe/Sofia\",\"Europe/Stockholm\",\"Europe/Tallinn\",\"Europe/Tirane\",\"Europe/Ulyanovsk\",\"Europe/Uzhgorod\",\"Europe/Vienna\",\"Europe/Vilnius\",\"Europe/Volgograd\",\"Europe/Warsaw\",\"Europe/Zaporozhye\",\"Europe/Zurich\",\"HST\",\"Indian/Chagos\",\"Indian/Christmas\",\"Indian/Cocos\",\"Indian/Kerguelen\",\"Indian/Mahe\",\"Indian/Maldives\",\"Indian/Mauritius\",\"Indian/Reunion\",\"MET\",\"MST\",\"MST7MDT\",\"PST8PDT\",\"Pacific/Apia\",\"Pacific/Auckland\",\"Pacific/Bougainville\",\"Pacific/Chatham\",\"Pacific/Chuuk\",\"Pacific/Easter\",\"Pacific/Efate\",\"Pacific/Enderbury\",\"Pacific/Fakaofo\",\"Pacific/Fiji\",\"Pacific/Funafuti\",\"Pacific/Galapagos\",\"Pacific/Gambier\",\"Pacific/Guadalcanal\",\"Pacific/Guam\",\"Pacific/Honolulu\",\"Pacific/Kiritimati\",\"Pacific/Kosrae\",\"Pacific/Kwajalein\",\"Pacific/Majuro\",\"Pacific/Marquesas\",\"Pacific/Nauru\",\"Pacific/Niue\",\"Pacific/Norfolk\",\"Pacific/Noumea\",\"Pacific/Pago_Pago\",\"Pacific/Palau\",\"Pacific/Pitcairn\",\"Pacific/Pohnpei\",\"Pacific/Port_Moresby\",\"Pacific/Rarotonga\",\"Pacific/Tahiti\",\"Pacific/Tarawa\",\"Pacific/Tongatapu\",\"Pacific/Wake\",\"Pacific/Wallis\",\"WET\"]\n\n\n// get ride of timezones such as: \"CET\", \"MET\", \"WET\"...\nconst slashTimezone = Alltimezone.filter(item => {\n    return item.includes(\"/\")\n})\n\n// get ride of timezones with \"GMT+1\"\nconst filtered = slashTimezone.filter(item => {\n    return !item.includes(\"GMT\") \n})\n\n// turn to two dimensions array: \"Africa/Abidjan\" => \"Africa\", \"Abidjan\"\n//  [[\"Africa\", \"Abidjan\"], [\"Africa\", \"Accra\"], ...]\nexport const splitedTimezone = filtered.map(item => {\n    return item.split(\"/\")\n})\n\n//export多項的方式：1. 前面直接加export，2. import {   }\n\n\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n    constructor(prop){\n        super(prop);\n        this.state = {\n            hasError: false\n        }\n    }\n    \n    componentDidCatch(error, errorInfo){\n        console.log(error, errorInfo)\n    }\n\n    render(){\n        if(this.state.hasError === true){\n            return(<h2 className='tc pa6'>something's wrong here</h2>)\n        }\n        return this.props.children;\n    }\n\n}\nexport default ErrorBoundary;","import React from 'react';\n\nconst SubButton = ({onSubButton, tz}) => {\n    return(\n        <div className=\"w-10 dib fr w2-ns \">\n            <svg \n            onClick={() => {onSubButton(tz)}}\n            className=\"grow\"\n            fill='none' stroke='#555555' strokeWidth='10' strokeDashoffset='194' strokeDasharray='0' strokeLinecap='round' strokeLinejoin='round' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'>\n                <circle cx=\"50\" cy=\"50\" r=\"40\"/> \n                <line x1=\"35\" y1=\"50\" x2=\"65\" y2=\"50\" />\n            </svg>\n        </div>\n    )\n}\n\nexport default SubButton;\n\n","import React from 'react';\n\nconst UpButton = ({onUpButton, tz}) => {\n    return(\n        <div className=\"w-10 dib fr w2-ns\">\n            <svg \n            onClick={() => {onUpButton(tz)}}\n            className=\"grow\"\n            fill='none' stroke='#555555' strokeWidth='10' strokeDashoffset='194' strokeDasharray='0' strokeLinecap='round' strokeLinejoin='round' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'>\n                <polyline fill=\"none\" points=\"30,30 50,15 70,30\" />\n            </svg>\n        </div>\n    )\n}\n\nexport default UpButton;\n\n","import React from 'react';\nimport { DateTime } from 'luxon'\nimport SubButton from '../component/SubButton';\nimport UpButton from '../component/UpButton';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Timezone = ({tz, onSubButton, onUpButton, index, local}) => {\n    const tzDataStr = DateTime.local().setZone(tz).setLocale('en-us').toLocaleString(DateTime.DATETIME_SHORT_WITH_SECONDS);\n    const tzDataStrHuge = DateTime.local().setZone(tz).setLocale('en-us').toLocaleString(DateTime.DATETIME_HUGE);\n    const zoneName = DateTime.local().setZone(tz).zoneName;\n    const subZoneName = zoneName.substring(zoneName.indexOf(\"/\")+1);\n\n    return(\n        <Draggable\n        draggableId={tz}\n        index={index}\n        >\n        {(provided) => {\n            return (\n                <div \n                className=\"center br3 w-90 pv3 ph4 bg-white mt2\"\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                >\n                    <div className=\"dib f3 f2-ns\" id=\"zoneName\"> {/*地名*/}\n                        {subZoneName}\n                    </div>\n                    {/*刪除按鈕*/}\n                    {                                                   \n                    zoneName === local ? \n                    null\n                    :\n                    <SubButton\n                        tz={tz}\n                        onSubButton={onSubButton}\n                    />\n                    }\n                    <div className=\"w-40-l  center-l\"> {/*分鐘 AM PM*/}\n                        <div className=\"dib w-70 tr pr2\">\n                            <span className=\"f1\" id=\"10:14\">\n                                {tzDataStr.slice(-11, -6)}\n                            </span>\n                            <span className=\"f2 gray\" id=\":55\">\n                                {tzDataStr.slice(-6, -3)}\n                            </span>\n                        </div>\n                        <div className=\"f4 dib\" id=\"AM PM\"> {/*AM PM*/}\n                            {tzDataStr.slice(-2)} \n                        </div>                    \n                    </div>                                                  \n                    <div className=\"f5 f3-ns gray dib \" id=\"Friday, December 11, 2020\">{/*日期*/}\n                        {tzDataStrHuge.slice(0, tzDataStrHuge.lastIndexOf(\",\"))}\n                    </div>\n                    {\n                    index !== 0 ?\n                    <UpButton\n                        tz={tz}\n                        onUpButton={onUpButton} \n                    />\n                    :\n                    null\n                    }\n                </div>\n            )\n        }}\n\n        </Draggable>\n    )\n}\n\nexport default Timezone;\n\n","import React from 'react';\nimport Timezone from './Timezone';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst TimezoneList = ({timezoneStrList, onSubButton, onUpButton, local}) => {\n    return(\n        <Droppable droppableId=\"droppable\">\n        {(provided, snapshot) => {\n            return(\n                <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                >\n                {\n                    timezoneStrList.map((item, index) => {\n                        return(\n                            <Timezone\n                            key={item}\n                            tz={item}\n                            onSubButton={onSubButton}\n                            onUpButton={onUpButton}\n                            index={index}\n                            local={local}\n                            />                      \n                        )\n                    })\n                }\n                {provided.placeholder}\n                </div>\n            )\n        }}   \n        \n        </Droppable>\n    )\n}\n\n\nexport default TimezoneList;","import React from 'react';\nimport Searchbox from '../component/Searchbox';\nimport {splitedTimezone} from '../component/Alltimezone';\nimport ErrorBoundary from '../component/ErrorBoundary';\nimport { DateTime } from \"luxon\";\nimport TimezoneList from '../component/TimezoneList';\nimport { DragDropContext } from 'react-beautiful-dnd';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      searchbox: '',\n      completeCity: [], // auto complete options\n      timezoneStrList: [DateTime.local().zoneName, ],\n      local: DateTime.local().zoneName\n    }\n  }\n\n  // when page loading, do fetch function every second \n  componentDidMount(){\n    this.dateID = setInterval(()=> {this.setState({local: DateTime.local().zoneName})}, 5000)\n  }\n\n  // clear interval\n  componentWillUnmount(){\n    clearInterval(this.dateID);\n  }\n\n// setState of searchbox and do compare\n  onInputChange = (event) => { \n    this.setState({\n      searchbox: event.target.value.toLowerCase(),\n    }) \n    this.compareCity(splitedTimezone, event.target.value.toLowerCase())\n  }\n\n// use compare result (completeCity) to refresh our timezoneStrList\n  onPlusButton = () => {\n    const { completeCity  } = this.state;\n    if(completeCity.length !== 0){ // [[\"Africa\", \"Tripoli\"], [\"Antarctica\", \"Troll\"]]\n      this.getTimezoneStr(completeCity[0]); // only add the first compare result\n      this.setState({searchbox: \"\"});\n    }\n    else{\n      console.log(\"there is no matched city\")\n    }\n  }\n\n  // use subtract button to remove tz\n  onSubButton = (tz) => {\n    const i = this.state.timezoneStrList.indexOf(tz);\n    this.setState(prevState => {\n      let newTzList = prevState.timezoneStrList.slice();\n      newTzList.splice(i, 1);\n      return {timezoneStrList: newTzList};\n    })\n  }\n\n  // move city up 1 step\n  onUpButton = (tz) => {\n    const i = this.state.timezoneStrList.indexOf(tz);\n    this.setState(prevState => {\n      let newTzList = prevState.timezoneStrList.slice();\n      const tzTemp = newTzList[i];\n      newTzList[i] = newTzList[i-1];\n      newTzList[i-1] = tzTemp;\n      return({timezoneStrList: newTzList}) \n    })\n  }\n\n// compare input value with [[\"Africa\", \"Abidjan\"], ...], and refresh our auto complete options\n  compareCity = (tzArr, inputValue) => {\n    for(let i in inputValue){\n    // if length of input value > city name => error. => use try catch\n      try{\n        tzArr = tzArr.filter(item => {\n          // only compare with the last city name, don't compare with \"Africa\"\n          return item[item.length-1][i].toLowerCase() === inputValue[i]\n        })\n        this.setState({completeCity: tzArr});\n      }\n      catch(error){\n        console.log(\"error\", error);\n      }\n    }\n  }\n\n//  convert compare result: [\"Africa\", \"Abidjan\"] to \"Africa/Abidjan\" and setState timezoneStrList\n  getTimezoneStr = (tz) => {\n    let tzStr = '';\n    tz.forEach(item => tzStr = tzStr + item + \"/\"); // Africa/Tripoli/\n    this.setState(prevState => {\n      let newList = prevState.timezoneStrList.slice();\n      if(!this.state.timezoneStrList.includes(tzStr.slice(0, -1))){ // not allow to repeat timezone \n        newList.push(tzStr.slice(0, -1)); // get ride of the latest \"/\"\n      }\n      return {timezoneStrList: newList}\n    })\n  }  \n\n  // an given array, with a known index (startIndex) of element, change to a new position (endIndex)\n  reorder = (array, startIndex, endIndex) => {\n    let orderedArray = array.slice();\n    const [dragged] = orderedArray.splice(startIndex, 1)\n    orderedArray.splice(endIndex, 0, dragged);\n    return orderedArray;\n  }\n\n  onDragEnd = (result) => {\n    if(!result.destination){ \n      return\n    }\n    const newOrder = this.reorder(this.state.timezoneStrList, result.source.index, result.destination.index);\n    this.setState({timezoneStrList: newOrder})\n  }\n\n  render(){\n    const {timezoneStrList, completeCity, searchbox} = this.state;\n\n// if has not get any timezone data, show \"loading\"\n    if(timezoneStrList.length === 0){\n      return(<h2 className='tc pa6'>loading...</h2>)\n    }\n    else{\n      let errorMes = completeCity.length === 0 && searchbox.length !==0 ? \"Invalid timezone.\" : null;\n\n      return(\n        <div> \n          <ErrorBoundary>\n            <Searchbox \n            completeCity={completeCity} \n            onInputChange={this.onInputChange}\n            errorMes={errorMes}\n            searchboxValue={searchbox}\n            onPlusButton={this.onPlusButton}\n            splitedTimezone={splitedTimezone}\n            />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <DragDropContext\n              onDragEnd={this.onDragEnd}>\n              <TimezoneList\n                now={this.state.now}\n                timezoneStrList={timezoneStrList}\n                onSubButton={this.onSubButton}\n                onUpButton={this.onUpButton}\n                local={this.state.local}\n              />\n            </DragDropContext>\n          </ErrorBoundary>\n        </div>\n      )\n    }\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}